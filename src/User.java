import java.time.*;
import java.time.temporal.ChronoUnit;
import java.util.*;
import java.util.stream.IntStream;

/** A user of Luca. */
public class User
{
    /**
     * Initials of first, middle, and last names, plus three randomly generated numbers.
     * Used by the Luca user to log in.
     */
    private String username;
    
    /**
     * A randomly generated password using Java Security package that is alphanumeric with symbols.
     * For now, the password is generated by the user and stored directly as a private field; however...
     * //TODO This should be implemented using Java Security to ensure the security of user and firm information
     */
    private String password;
    
    /** First name of the user; used to generate first letter of the username. */
    private String firstName;
    
    /** Middle initial of the user; used to generate second letter of the username. */
    private String middleInit;
    
    /** Last name of the user; used to generate third letter of the username. */
    private String lastName;
    
    /**
     * Date and time in which the user account was created according to the America/New_York time zone.
     * Contains year, month, day, hour, minute, and second.
     */
    private ZonedDateTime timeCreated;

    /**
     * A boolean that identifies a user as either being REGULAR or ADMIN.
     * TRUE if ADMIN and FALSE if REGULAR
     * // TODO Will likely need more formal Java Security implementation
     */
    private boolean adminPriv;
    
    /**
     * The total amount a user has added to the funds for investment purposes.
     * // TODO Consider making this type Balance so that users can add or remove contributions over time
     */
    private double userContribution;
    
    /**
     * The amount a user would have if all funds were to be liquidated and withdrawn from the account.
     * Unlike contribution, the balance of a user is dependent upon the current value of the portfolio,
     * the amount the user has contributed in relation to the total amount contributed by all users, and if the user
     * is considered a general partner, a limited partner, or an investor.
     * // TODO Decide if this will represent the current value of investment (i.e. as it is) or something else
     */
    private Balance userBalance;
    
    /**
     * Constructor for initializing a user
     * @param first First name of the user (case does not matter).
     * @param middleInit Middle initial of the user (case does not matter).
     * @param last Last name of the user (case does not matter).
     * @param password Password for logging in.
     * @param adminPriv Boolean that allows for admin privileges.
     * @param contribution Amount of money given by the user for investing.
     */
    public User(String first, String middleInit, String last, String password, boolean adminPriv, double contribution)
    {
        this.firstName = first.toUpperCase();
        this.middleInit = middleInit.toUpperCase();
        this.lastName = last.toUpperCase();
        this.username = makeUsername(first, middleInit, last);
        this.password = password;
        this.adminPriv = adminPriv;
        this.timeCreated = ZonedDateTime.now().truncatedTo(ChronoUnit.SECONDS);
        this.userContribution = contribution;
        this.userBalance = new Balance(contribution);
        userBalance.updateBalance(userBalance);
    }
    
    /**
     * Creates a username for the user that is the first initial of first, middle, and last names, and three randomly
     * generated numbers.
     * @param firstName First name of the user
     * @param middleInit Middle initial of the user
     * @param lastName Last name of the user
     * @return Username (e.g. ABC123)
     */
    public String makeUsername(String firstName, String middleInit, String lastName)
    {
        String[] userArray = new String[6]; // Array to hold elements to create username
    
        userArray[0] = String.valueOf(firstName.charAt(0)); // first name initial
        userArray[1] = String.valueOf(middleInit.charAt(0)); // middle name initial
        userArray[2] = String.valueOf(lastName.charAt(0)); // last name initial
    
        Random randomGen = new Random(); // To generate the three random numbers following the user initials
    
        // Generates three random numbers and adds them to userArray. Numbers generated are between 0 and 9
        IntStream.range(3, 6).forEach(i -> {
            int num = randomGen.nextInt(9);
            userArray[i] = Integer.toString(num);
        });
    
        // To concatenate the initials and numbers
        StringBuilder nameBuilder = new StringBuilder();
        String name = null;
    
        // Create the username and assign it to the user
        for(String s : userArray)
        {
            nameBuilder.append(s);
            name = nameBuilder.toString();
        }
        
        return name;
    }
    
    // TODO Change or overload to allow for transaction/trading request
    /** Method to request a transaction. */
    public void requestTransaction(Transaction request)
    {
        request.setRequestDate(ZonedDateTime.now(ZoneId.of("America/New_York")).truncatedTo(ChronoUnit.SECONDS));
        request.setRequestUser(this);
        request.setTransactionID(
                        request.getRequestDate().getYear() + "" +
                        request.getRequestDate().getMonthValue() + "" +
                        request.getRequestDate().getDayOfMonth() + "" +
                        request.getRequestDate().getHour() + "" +
                        request.getRequestDate().getMinute() + "" +
                        request.getRequestDate().getSecond());
        request.addTransactionRequest();
        
        request.addTransactionRequest();
    }
    
    // TODO Available only to admin users
    public void resolveTransaction(Transaction transaction, String updatedStatus)
    {
        transaction.setResolveDate(ZonedDateTime.now(ZoneId.of("America/New_York")).truncatedTo(ChronoUnit.SECONDS));
        transaction.setResolveUser(this);
        
        if(updatedStatus.equals("Denied"))
            transaction.setTransactionStatus(Transaction.Status.DENIED);
    
        if(updatedStatus.equals("Deposited"))
            Bank.deposit(transaction);
        
        if(updatedStatus.equals("Withdrawn"))
            Bank.withdraw(transaction);
        
        if(updatedStatus.equals("Bought"))
            Portfolio.buyOrder(transaction);
        
        if(updatedStatus.equals("Sold"))
            Portfolio.sellOrder(transaction);
    
        transaction.removeTransactionRequest();
        transaction.addToTransactionHistory();
    }
    
    // TODO redundant with getAdminPriv ?
    /**
     * Alternative method to access the adminPriv field. States if a user has administrative permissions.
     * @return True if the user does have admin permissions and false if not.
     */
    public boolean hasPermission()
    {
        return this.getAdminPriv();
    }
    
    /**
     * // TODO Add functionality if user is not in the account
     * // TODO Should only be available to admin users.
     * Allows a user's status to be changed to either regular or admin.
     * @param access True if the user has admin permissions and false if not.
     */
    public void changeAdminAccess(boolean access)
    {
        if(access)
            this.setAdminPriv(true);
        else
            this.setAdminPriv(false);
    }
    
    /**
     * Formats ZonedDateTime to be more readable.
     *
     * @param time The time to be formatted.
     * @return Formatted ZonedDateTime.
     */
    public String formatTime(ZonedDateTime time)
    {
        String month = time.getMonth().toString();
        String day = Integer.toString(time.getDayOfMonth());
        String year = Integer.toString(time.getYear());
        String hour = Integer.toString(time.getHour());
        String minute = Integer.toString(time.getMinute());
        String second = Integer.toString(time.getSecond());
        String timeZone = time.getZone().toString();
        
        return month + " " + day + ", " + year + " (" + hour + ":" + minute + ":" + second + " " + timeZone + ")";
    }
    
    /**
     * Formats the user's full name.
     * @return Readable full name of the user.
     */
    public String formatName()
    {
        String first = this.getFirstName();
        String midInit = this.getMiddleInit();
        String last = this.getLastName();
        
        return first + " " + midInit + ". " + last;
    }
    
    //******************************** GETTER METHODS ********************************//
    
    public String getUsername()
    {
        return username;
    }
    
    public String getPassword()
    {
        return password;
    }
    
    public String getFirstName()
    {
        return firstName;
    }
    
    public String getMiddleInit()
    {
        return middleInit;
    }
    
    public String getLastName()
    {
        return lastName;
    }
    
    public double getContribution()
    {
        return userContribution;
    }
    
    public ZonedDateTime getTimeCreated()
    {
        return timeCreated;
    }
    
    public boolean getAdminPriv()
    {
        return adminPriv;
    }
    
    public double getUserContribution()
    {
        return userContribution;
    }
    
    public Balance getUserBalance()
    {
        return userBalance;
    }
    
    //******************************** SETTER METHODS ********************************//
    
    public void setFirstName(String firstName)
    {
        this.firstName = firstName;
    }
    
    public void setMiddleInit(String middleInit)
    {
        this.middleInit = middleInit;
    }
    
    public void setLastName(String lastName)
    {
        this.lastName = lastName;
    }
    
    public void setUsername(String username)
    {
        this.username = username;
    }
    
    public void setPassword(String password)
    {
        this.password = password;
    }
    
    public void setTimeCreated(ZonedDateTime timeCreated)
    {
        this.timeCreated = timeCreated;
    }
    
    public void setAdminPriv(boolean adminPriv)
    {
        this.adminPriv = adminPriv;
    }
    
    public void setUserContribution(double userContribution)
    {
        this.userContribution = userContribution;
    }
    
    public void setUserBalance(Balance userBalance)
    {
        this.userBalance = userBalance;
    }
    
}
