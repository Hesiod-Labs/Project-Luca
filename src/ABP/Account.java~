package ABP;

import BTA.*;
import LucaMember.User;

import java.time.*;
import java.time.temporal.ChronoUnit;
import java.util.*;

/**
 * An account within the Luca application. Each account has an associated {@link Bank},where funds not currently
 * invested are allocated. Each account has a {@link Portfolio}, which can contain owned {@link Asset}(s) and funds
 * actively used for investing. Each account has at least one {@link LucaMember} that can actively request transactions
 * ({@link User#requestTransaction(Transaction)}) between the bank and the user, and between the bank and the
 * portfolio. A user with admin permissions ({@link User#getClearance()} ()}) can act on requested transactions by
 * "resolving" ({@link User#resolveTransaction(Transaction, String)}), such that the transaction is either denied
 * or the funds associated with transaction are allocated appropriately. An account, user(s), bank, and portfolio
 * all have an associated {@link Balance}, which represents both the current amount of funds belonging to that
 * entity, as well as historical amounts that were determined by previous transactions.
 * @author hLabs
 * @version 0.1a
 * @since 0.1a
 */
public class Account
{
    //TODO For all classes, consider removing all setter methods that are unused and could cause loss of data.
    //TODO Look into FIFO and LIFO when calculating account balance
    /**
     * Sum of funds belonging to bank and the bank and portfolio.
     *
     * @see Balance
     */
    private static Balance accountBalance;
    
    /**
     * Holds funds not for investing and has an associated balance.
     *
     * @see Bank
     */
    private static Bank accountBank;
    
    /**
     * Can hold owned asset(s) and has an associated balance investing.
     *
     * @see Portfolio
     */
    private static Portfolio accountPortfolio;
    
    /**
     * A list of {@link Transaction}s that have been requested, but have not yet been resolved. A
     * {@link Transaction} requested by a non-admin {@link LucaMember} is automatically added to the list, but only
     * optionally added if requested by an admin user.
     * //TODO Add the option for an admin user to add to this list if the transaction should be resolved at a later time
     */
    private static LinkedList<Transaction> transactionRequests = new LinkedList<>();
    
    /**
     * Contains transactions that have been requested and resolved.
     */
    private static Stack<Transaction> transactionHistory = new Stack<>();
    
    /**
     * Name assigned to the account. Generated by the account owner.
     */
    private static String accountName;
    
    /**
     * Date and time in which the account was created.
     */
    private static ZonedDateTime timeCreated;
    
    /**
     * All users associated with the account.
     *
     * @see LucaMember
     */
    private static ArrayList<User> accountUsers;
    
    /**
     * Creates an account with an existing balance, bank, portfolio, and user(s).
     *
     * @param name          Name designated to the account by the account owner. //TODO Consider adding an account OWNER
     * @param initialAmount Total funds in the account that is located in either the bank, portfolio, or both.
     * @param b             Bank associated with account. Holds funds not used for trading assets.
     * @param users         All users who are associated with the account.
     * @param port          Portfolio associated with the account. Holds owned assets and funds for trading.
     */
    public Account(String name, Balance initialAmount, Bank b, ArrayList<User> users, Portfolio port)
    {
        accountName = name;
        accountBalance = initialAmount;
        accountBank = b;
        accountUsers = users;
        accountPortfolio = port;
        timeCreated = ZonedDateTime.now(ZoneId.of("America/New_York")).truncatedTo(ChronoUnit.SECONDS);
        
        //TODO For testing Login
    }
    
    /**
     * Creates an account, empty balance, and empty portfolio, all with names.
     *
     * @param accName       Name of the account.
     * @param bankName      Name of the bank.
     * @param portfolioName Name of the portfolio.
     */
    public Account(String accName, String bankName, String portfolioName)
    {
        this(accName, new Balance(), new Bank(bankName), new ArrayList<User>(), new Portfolio(portfolioName));
    }
    
    /**
     * Creates an account with only a name, and an empty balance, bank, and portfolio, and no user.
     * Not recommended to use if it is important to have names associated with the bank and portfolio.
     *
     * @param accName Name of the account.
     */
    public Account(String accName)
    {
        this(accName, new Balance(), new Bank(), new ArrayList<User>(), new Portfolio());
    }
    
    /**
     * @return {@link Balance} object that has associated dollar value, transactions, and historical balances.
     * Contains historical balances from {@link Bank#getBankBalance()} and {@link Portfolio#getPortfolioBalance()}.
     */
    public static Balance getAccountBalance()
    {
        return accountBalance;
    }
    
    /**
     * @return List of requested transactions to be resolved.
     */
    public static LinkedList<Transaction> getTransactionRequests()
    {
        return transactionRequests;
    }
    
    /**
     * //TODO Make sure cancelled transactions do not go in the history.
     *
     * @return History of all transactions requested and resolved. Transactions that are cancelled before resolution
     * are not included in the history.
     */
    public static Stack<Transaction> getTransactionHistory()
    {
        return transactionHistory;
    }
    
    /**
     * @return List of users associated with the account.
     * @see LucaMember
     */
    public static ArrayList<User> getAccountUsers()
    {
        return accountUsers;
    }
    
    /**
     * @return Name designated to the account.
     */
    public static String getAccountName()
    {
        return accountName;
    }
}